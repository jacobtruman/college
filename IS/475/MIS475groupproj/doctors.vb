'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class doctors
    Inherits DataSet
    
    Private tabledoctor As doctorDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("doctor")) Is Nothing) Then
                Me.Tables.Add(New doctorDataTable(ds.Tables("doctor")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property doctor As doctorDataTable
        Get
            Return Me.tabledoctor
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As doctors = CType(MyBase.Clone,doctors)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("doctor")) Is Nothing) Then
            Me.Tables.Add(New doctorDataTable(ds.Tables("doctor")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tabledoctor = CType(Me.Tables("doctor"),doctorDataTable)
        If (Not (Me.tabledoctor) Is Nothing) Then
            Me.tabledoctor.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "doctors"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/doctors.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tabledoctor = New doctorDataTable
        Me.Tables.Add(Me.tabledoctor)
    End Sub
    
    Private Function ShouldSerializedoctor() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub doctorRowChangeEventHandler(ByVal sender As Object, ByVal e As doctorRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class doctorDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columndoc_address As DataColumn
        
        Private columndoc_city As DataColumn
        
        Private columndoc_email As DataColumn
        
        Private columndoc_fname As DataColumn
        
        Private columndoc_id As DataColumn
        
        Private columndoc_lname As DataColumn
        
        Private columndoc_mobile As DataColumn
        
        Private columndoc_phone As DataColumn
        
        Private columndoc_position As DataColumn
        
        Private columndoc_state As DataColumn
        
        Private columndoc_zip As DataColumn
        
        Friend Sub New()
            MyBase.New("doctor")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property doc_addressColumn As DataColumn
            Get
                Return Me.columndoc_address
            End Get
        End Property
        
        Friend ReadOnly Property doc_cityColumn As DataColumn
            Get
                Return Me.columndoc_city
            End Get
        End Property
        
        Friend ReadOnly Property doc_emailColumn As DataColumn
            Get
                Return Me.columndoc_email
            End Get
        End Property
        
        Friend ReadOnly Property doc_fnameColumn As DataColumn
            Get
                Return Me.columndoc_fname
            End Get
        End Property
        
        Friend ReadOnly Property doc_idColumn As DataColumn
            Get
                Return Me.columndoc_id
            End Get
        End Property
        
        Friend ReadOnly Property doc_lnameColumn As DataColumn
            Get
                Return Me.columndoc_lname
            End Get
        End Property
        
        Friend ReadOnly Property doc_mobileColumn As DataColumn
            Get
                Return Me.columndoc_mobile
            End Get
        End Property
        
        Friend ReadOnly Property doc_phoneColumn As DataColumn
            Get
                Return Me.columndoc_phone
            End Get
        End Property
        
        Friend ReadOnly Property doc_positionColumn As DataColumn
            Get
                Return Me.columndoc_position
            End Get
        End Property
        
        Friend ReadOnly Property doc_stateColumn As DataColumn
            Get
                Return Me.columndoc_state
            End Get
        End Property
        
        Friend ReadOnly Property doc_zipColumn As DataColumn
            Get
                Return Me.columndoc_zip
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As doctorRow
            Get
                Return CType(Me.Rows(index),doctorRow)
            End Get
        End Property
        
        Public Event doctorRowChanged As doctorRowChangeEventHandler
        
        Public Event doctorRowChanging As doctorRowChangeEventHandler
        
        Public Event doctorRowDeleted As doctorRowChangeEventHandler
        
        Public Event doctorRowDeleting As doctorRowChangeEventHandler
        
        Public Overloads Sub AdddoctorRow(ByVal row As doctorRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AdddoctorRow(ByVal doc_address As String, ByVal doc_city As String, ByVal doc_email As String, ByVal doc_fname As String, ByVal doc_id As Integer, ByVal doc_lname As String, ByVal doc_mobile As String, ByVal doc_phone As String, ByVal doc_position As String, ByVal doc_state As String, ByVal doc_zip As Integer) As doctorRow
            Dim rowdoctorRow As doctorRow = CType(Me.NewRow,doctorRow)
            rowdoctorRow.ItemArray = New Object() {doc_address, doc_city, doc_email, doc_fname, doc_id, doc_lname, doc_mobile, doc_phone, doc_position, doc_state, doc_zip}
            Me.Rows.Add(rowdoctorRow)
            Return rowdoctorRow
        End Function
        
        Public Function FindBydoc_id(ByVal doc_id As Integer) As doctorRow
            Return CType(Me.Rows.Find(New Object() {doc_id}),doctorRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As doctorDataTable = CType(MyBase.Clone,doctorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New doctorDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columndoc_address = Me.Columns("doc_address")
            Me.columndoc_city = Me.Columns("doc_city")
            Me.columndoc_email = Me.Columns("doc_email")
            Me.columndoc_fname = Me.Columns("doc_fname")
            Me.columndoc_id = Me.Columns("doc_id")
            Me.columndoc_lname = Me.Columns("doc_lname")
            Me.columndoc_mobile = Me.Columns("doc_mobile")
            Me.columndoc_phone = Me.Columns("doc_phone")
            Me.columndoc_position = Me.Columns("doc_position")
            Me.columndoc_state = Me.Columns("doc_state")
            Me.columndoc_zip = Me.Columns("doc_zip")
        End Sub
        
        Private Sub InitClass()
            Me.columndoc_address = New DataColumn("doc_address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndoc_address)
            Me.columndoc_city = New DataColumn("doc_city", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndoc_city)
            Me.columndoc_email = New DataColumn("doc_email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndoc_email)
            Me.columndoc_fname = New DataColumn("doc_fname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndoc_fname)
            Me.columndoc_id = New DataColumn("doc_id", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndoc_id)
            Me.columndoc_lname = New DataColumn("doc_lname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndoc_lname)
            Me.columndoc_mobile = New DataColumn("doc_mobile", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndoc_mobile)
            Me.columndoc_phone = New DataColumn("doc_phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndoc_phone)
            Me.columndoc_position = New DataColumn("doc_position", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndoc_position)
            Me.columndoc_state = New DataColumn("doc_state", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndoc_state)
            Me.columndoc_zip = New DataColumn("doc_zip", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndoc_zip)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columndoc_id}, true))
            Me.columndoc_id.AllowDBNull = false
            Me.columndoc_id.Unique = true
        End Sub
        
        Public Function NewdoctorRow() As doctorRow
            Return CType(Me.NewRow,doctorRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New doctorRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(doctorRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.doctorRowChangedEvent) Is Nothing) Then
                RaiseEvent doctorRowChanged(Me, New doctorRowChangeEvent(CType(e.Row,doctorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.doctorRowChangingEvent) Is Nothing) Then
                RaiseEvent doctorRowChanging(Me, New doctorRowChangeEvent(CType(e.Row,doctorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.doctorRowDeletedEvent) Is Nothing) Then
                RaiseEvent doctorRowDeleted(Me, New doctorRowChangeEvent(CType(e.Row,doctorRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.doctorRowDeletingEvent) Is Nothing) Then
                RaiseEvent doctorRowDeleting(Me, New doctorRowChangeEvent(CType(e.Row,doctorRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovedoctorRow(ByVal row As doctorRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class doctorRow
        Inherits DataRow
        
        Private tabledoctor As doctorDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabledoctor = CType(Me.Table,doctorDataTable)
        End Sub
        
        Public Property doc_address As String
            Get
                Try 
                    Return CType(Me(Me.tabledoctor.doc_addressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledoctor.doc_addressColumn) = value
            End Set
        End Property
        
        Public Property doc_city As String
            Get
                Try 
                    Return CType(Me(Me.tabledoctor.doc_cityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledoctor.doc_cityColumn) = value
            End Set
        End Property
        
        Public Property doc_email As String
            Get
                Try 
                    Return CType(Me(Me.tabledoctor.doc_emailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledoctor.doc_emailColumn) = value
            End Set
        End Property
        
        Public Property doc_fname As String
            Get
                Try 
                    Return CType(Me(Me.tabledoctor.doc_fnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledoctor.doc_fnameColumn) = value
            End Set
        End Property
        
        Public Property doc_id As Integer
            Get
                Return CType(Me(Me.tabledoctor.doc_idColumn),Integer)
            End Get
            Set
                Me(Me.tabledoctor.doc_idColumn) = value
            End Set
        End Property
        
        Public Property doc_lname As String
            Get
                Try 
                    Return CType(Me(Me.tabledoctor.doc_lnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledoctor.doc_lnameColumn) = value
            End Set
        End Property
        
        Public Property doc_mobile As String
            Get
                Try 
                    Return CType(Me(Me.tabledoctor.doc_mobileColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledoctor.doc_mobileColumn) = value
            End Set
        End Property
        
        Public Property doc_phone As String
            Get
                Try 
                    Return CType(Me(Me.tabledoctor.doc_phoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledoctor.doc_phoneColumn) = value
            End Set
        End Property
        
        Public Property doc_position As String
            Get
                Try 
                    Return CType(Me(Me.tabledoctor.doc_positionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledoctor.doc_positionColumn) = value
            End Set
        End Property
        
        Public Property doc_state As String
            Get
                Try 
                    Return CType(Me(Me.tabledoctor.doc_stateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledoctor.doc_stateColumn) = value
            End Set
        End Property
        
        Public Property doc_zip As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledoctor.doc_zipColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledoctor.doc_zipColumn) = value
            End Set
        End Property
        
        Public Function Isdoc_addressNull() As Boolean
            Return Me.IsNull(Me.tabledoctor.doc_addressColumn)
        End Function
        
        Public Sub Setdoc_addressNull()
            Me(Me.tabledoctor.doc_addressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdoc_cityNull() As Boolean
            Return Me.IsNull(Me.tabledoctor.doc_cityColumn)
        End Function
        
        Public Sub Setdoc_cityNull()
            Me(Me.tabledoctor.doc_cityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdoc_emailNull() As Boolean
            Return Me.IsNull(Me.tabledoctor.doc_emailColumn)
        End Function
        
        Public Sub Setdoc_emailNull()
            Me(Me.tabledoctor.doc_emailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdoc_fnameNull() As Boolean
            Return Me.IsNull(Me.tabledoctor.doc_fnameColumn)
        End Function
        
        Public Sub Setdoc_fnameNull()
            Me(Me.tabledoctor.doc_fnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdoc_lnameNull() As Boolean
            Return Me.IsNull(Me.tabledoctor.doc_lnameColumn)
        End Function
        
        Public Sub Setdoc_lnameNull()
            Me(Me.tabledoctor.doc_lnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdoc_mobileNull() As Boolean
            Return Me.IsNull(Me.tabledoctor.doc_mobileColumn)
        End Function
        
        Public Sub Setdoc_mobileNull()
            Me(Me.tabledoctor.doc_mobileColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdoc_phoneNull() As Boolean
            Return Me.IsNull(Me.tabledoctor.doc_phoneColumn)
        End Function
        
        Public Sub Setdoc_phoneNull()
            Me(Me.tabledoctor.doc_phoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdoc_positionNull() As Boolean
            Return Me.IsNull(Me.tabledoctor.doc_positionColumn)
        End Function
        
        Public Sub Setdoc_positionNull()
            Me(Me.tabledoctor.doc_positionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdoc_stateNull() As Boolean
            Return Me.IsNull(Me.tabledoctor.doc_stateColumn)
        End Function
        
        Public Sub Setdoc_stateNull()
            Me(Me.tabledoctor.doc_stateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Isdoc_zipNull() As Boolean
            Return Me.IsNull(Me.tabledoctor.doc_zipColumn)
        End Function
        
        Public Sub Setdoc_zipNull()
            Me(Me.tabledoctor.doc_zipColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class doctorRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As doctorRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As doctorRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As doctorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
