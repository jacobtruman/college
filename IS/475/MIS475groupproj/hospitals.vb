'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class hospitals
    Inherits DataSet
    
    Private tablehospital As hospitalDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("hospital")) Is Nothing) Then
                Me.Tables.Add(New hospitalDataTable(ds.Tables("hospital")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property hospital As hospitalDataTable
        Get
            Return Me.tablehospital
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As hospitals = CType(MyBase.Clone,hospitals)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("hospital")) Is Nothing) Then
            Me.Tables.Add(New hospitalDataTable(ds.Tables("hospital")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablehospital = CType(Me.Tables("hospital"),hospitalDataTable)
        If (Not (Me.tablehospital) Is Nothing) Then
            Me.tablehospital.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "hospitals"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/hospitals.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablehospital = New hospitalDataTable
        Me.Tables.Add(Me.tablehospital)
    End Sub
    
    Private Function ShouldSerializehospital() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub hospitalRowChangeEventHandler(ByVal sender As Object, ByVal e As hospitalRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class hospitalDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnhosp_address As DataColumn
        
        Private columnhosp_city As DataColumn
        
        Private columnhosp_email As DataColumn
        
        Private columnhosp_fax As DataColumn
        
        Private columnhosp_name As DataColumn
        
        Private columnhosp_phone As DataColumn
        
        Private columnhosp_state As DataColumn
        
        Private columnhosp_zip As DataColumn
        
        Friend Sub New()
            MyBase.New("hospital")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property hosp_addressColumn As DataColumn
            Get
                Return Me.columnhosp_address
            End Get
        End Property
        
        Friend ReadOnly Property hosp_cityColumn As DataColumn
            Get
                Return Me.columnhosp_city
            End Get
        End Property
        
        Friend ReadOnly Property hosp_emailColumn As DataColumn
            Get
                Return Me.columnhosp_email
            End Get
        End Property
        
        Friend ReadOnly Property hosp_faxColumn As DataColumn
            Get
                Return Me.columnhosp_fax
            End Get
        End Property
        
        Friend ReadOnly Property hosp_nameColumn As DataColumn
            Get
                Return Me.columnhosp_name
            End Get
        End Property
        
        Friend ReadOnly Property hosp_phoneColumn As DataColumn
            Get
                Return Me.columnhosp_phone
            End Get
        End Property
        
        Friend ReadOnly Property hosp_stateColumn As DataColumn
            Get
                Return Me.columnhosp_state
            End Get
        End Property
        
        Friend ReadOnly Property hosp_zipColumn As DataColumn
            Get
                Return Me.columnhosp_zip
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As hospitalRow
            Get
                Return CType(Me.Rows(index),hospitalRow)
            End Get
        End Property
        
        Public Event hospitalRowChanged As hospitalRowChangeEventHandler
        
        Public Event hospitalRowChanging As hospitalRowChangeEventHandler
        
        Public Event hospitalRowDeleted As hospitalRowChangeEventHandler
        
        Public Event hospitalRowDeleting As hospitalRowChangeEventHandler
        
        Public Overloads Sub AddhospitalRow(ByVal row As hospitalRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddhospitalRow(ByVal hosp_address As String, ByVal hosp_city As String, ByVal hosp_email As String, ByVal hosp_fax As String, ByVal hosp_name As String, ByVal hosp_phone As String, ByVal hosp_state As String, ByVal hosp_zip As Integer) As hospitalRow
            Dim rowhospitalRow As hospitalRow = CType(Me.NewRow,hospitalRow)
            rowhospitalRow.ItemArray = New Object() {hosp_address, hosp_city, hosp_email, hosp_fax, hosp_name, hosp_phone, hosp_state, hosp_zip}
            Me.Rows.Add(rowhospitalRow)
            Return rowhospitalRow
        End Function
        
        Public Function FindByhosp_name(ByVal hosp_name As String) As hospitalRow
            Return CType(Me.Rows.Find(New Object() {hosp_name}),hospitalRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As hospitalDataTable = CType(MyBase.Clone,hospitalDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New hospitalDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnhosp_address = Me.Columns("hosp_address")
            Me.columnhosp_city = Me.Columns("hosp_city")
            Me.columnhosp_email = Me.Columns("hosp_email")
            Me.columnhosp_fax = Me.Columns("hosp_fax")
            Me.columnhosp_name = Me.Columns("hosp_name")
            Me.columnhosp_phone = Me.Columns("hosp_phone")
            Me.columnhosp_state = Me.Columns("hosp_state")
            Me.columnhosp_zip = Me.Columns("hosp_zip")
        End Sub
        
        Private Sub InitClass()
            Me.columnhosp_address = New DataColumn("hosp_address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhosp_address)
            Me.columnhosp_city = New DataColumn("hosp_city", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhosp_city)
            Me.columnhosp_email = New DataColumn("hosp_email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhosp_email)
            Me.columnhosp_fax = New DataColumn("hosp_fax", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhosp_fax)
            Me.columnhosp_name = New DataColumn("hosp_name", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhosp_name)
            Me.columnhosp_phone = New DataColumn("hosp_phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhosp_phone)
            Me.columnhosp_state = New DataColumn("hosp_state", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhosp_state)
            Me.columnhosp_zip = New DataColumn("hosp_zip", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhosp_zip)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnhosp_name}, true))
            Me.columnhosp_name.AllowDBNull = false
            Me.columnhosp_name.Unique = true
        End Sub
        
        Public Function NewhospitalRow() As hospitalRow
            Return CType(Me.NewRow,hospitalRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New hospitalRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(hospitalRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.hospitalRowChangedEvent) Is Nothing) Then
                RaiseEvent hospitalRowChanged(Me, New hospitalRowChangeEvent(CType(e.Row,hospitalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.hospitalRowChangingEvent) Is Nothing) Then
                RaiseEvent hospitalRowChanging(Me, New hospitalRowChangeEvent(CType(e.Row,hospitalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.hospitalRowDeletedEvent) Is Nothing) Then
                RaiseEvent hospitalRowDeleted(Me, New hospitalRowChangeEvent(CType(e.Row,hospitalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.hospitalRowDeletingEvent) Is Nothing) Then
                RaiseEvent hospitalRowDeleting(Me, New hospitalRowChangeEvent(CType(e.Row,hospitalRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovehospitalRow(ByVal row As hospitalRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class hospitalRow
        Inherits DataRow
        
        Private tablehospital As hospitalDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablehospital = CType(Me.Table,hospitalDataTable)
        End Sub
        
        Public Property hosp_address As String
            Get
                Try 
                    Return CType(Me(Me.tablehospital.hosp_addressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehospital.hosp_addressColumn) = value
            End Set
        End Property
        
        Public Property hosp_city As String
            Get
                Try 
                    Return CType(Me(Me.tablehospital.hosp_cityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehospital.hosp_cityColumn) = value
            End Set
        End Property
        
        Public Property hosp_email As String
            Get
                Try 
                    Return CType(Me(Me.tablehospital.hosp_emailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehospital.hosp_emailColumn) = value
            End Set
        End Property
        
        Public Property hosp_fax As String
            Get
                Try 
                    Return CType(Me(Me.tablehospital.hosp_faxColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehospital.hosp_faxColumn) = value
            End Set
        End Property
        
        Public Property hosp_name As String
            Get
                Return CType(Me(Me.tablehospital.hosp_nameColumn),String)
            End Get
            Set
                Me(Me.tablehospital.hosp_nameColumn) = value
            End Set
        End Property
        
        Public Property hosp_phone As String
            Get
                Try 
                    Return CType(Me(Me.tablehospital.hosp_phoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehospital.hosp_phoneColumn) = value
            End Set
        End Property
        
        Public Property hosp_state As String
            Get
                Try 
                    Return CType(Me(Me.tablehospital.hosp_stateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehospital.hosp_stateColumn) = value
            End Set
        End Property
        
        Public Property hosp_zip As Integer
            Get
                Try 
                    Return CType(Me(Me.tablehospital.hosp_zipColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablehospital.hosp_zipColumn) = value
            End Set
        End Property
        
        Public Function Ishosp_addressNull() As Boolean
            Return Me.IsNull(Me.tablehospital.hosp_addressColumn)
        End Function
        
        Public Sub Sethosp_addressNull()
            Me(Me.tablehospital.hosp_addressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ishosp_cityNull() As Boolean
            Return Me.IsNull(Me.tablehospital.hosp_cityColumn)
        End Function
        
        Public Sub Sethosp_cityNull()
            Me(Me.tablehospital.hosp_cityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ishosp_emailNull() As Boolean
            Return Me.IsNull(Me.tablehospital.hosp_emailColumn)
        End Function
        
        Public Sub Sethosp_emailNull()
            Me(Me.tablehospital.hosp_emailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ishosp_faxNull() As Boolean
            Return Me.IsNull(Me.tablehospital.hosp_faxColumn)
        End Function
        
        Public Sub Sethosp_faxNull()
            Me(Me.tablehospital.hosp_faxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ishosp_phoneNull() As Boolean
            Return Me.IsNull(Me.tablehospital.hosp_phoneColumn)
        End Function
        
        Public Sub Sethosp_phoneNull()
            Me(Me.tablehospital.hosp_phoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ishosp_stateNull() As Boolean
            Return Me.IsNull(Me.tablehospital.hosp_stateColumn)
        End Function
        
        Public Sub Sethosp_stateNull()
            Me(Me.tablehospital.hosp_stateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ishosp_zipNull() As Boolean
            Return Me.IsNull(Me.tablehospital.hosp_zipColumn)
        End Function
        
        Public Sub Sethosp_zipNull()
            Me(Me.tablehospital.hosp_zipColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class hospitalRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As hospitalRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As hospitalRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As hospitalRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
