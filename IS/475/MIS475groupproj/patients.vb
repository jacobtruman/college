'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class patients
    Inherits DataSet
    
    Private tablepatient As patientDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("patient")) Is Nothing) Then
                Me.Tables.Add(New patientDataTable(ds.Tables("patient")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property patient As patientDataTable
        Get
            Return Me.tablepatient
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As patients = CType(MyBase.Clone,patients)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("patient")) Is Nothing) Then
            Me.Tables.Add(New patientDataTable(ds.Tables("patient")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablepatient = CType(Me.Tables("patient"),patientDataTable)
        If (Not (Me.tablepatient) Is Nothing) Then
            Me.tablepatient.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "patients"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/patients.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablepatient = New patientDataTable
        Me.Tables.Add(Me.tablepatient)
    End Sub
    
    Private Function ShouldSerializepatient() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub patientRowChangeEventHandler(ByVal sender As Object, ByVal e As patientRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class patientDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpat_address As DataColumn
        
        Private columnpat_city As DataColumn
        
        Private columnpat_dob As DataColumn
        
        Private columnpat_email As DataColumn
        
        Private columnpat_fname As DataColumn
        
        Private columnpat_lname As DataColumn
        
        Private columnpat_phone As DataColumn
        
        Private columnpat_ssn As DataColumn
        
        Private columnpat_state As DataColumn
        
        Private columnpat_zip As DataColumn
        
        Friend Sub New()
            MyBase.New("patient")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property pat_addressColumn As DataColumn
            Get
                Return Me.columnpat_address
            End Get
        End Property
        
        Friend ReadOnly Property pat_cityColumn As DataColumn
            Get
                Return Me.columnpat_city
            End Get
        End Property
        
        Friend ReadOnly Property pat_dobColumn As DataColumn
            Get
                Return Me.columnpat_dob
            End Get
        End Property
        
        Friend ReadOnly Property pat_emailColumn As DataColumn
            Get
                Return Me.columnpat_email
            End Get
        End Property
        
        Friend ReadOnly Property pat_fnameColumn As DataColumn
            Get
                Return Me.columnpat_fname
            End Get
        End Property
        
        Friend ReadOnly Property pat_lnameColumn As DataColumn
            Get
                Return Me.columnpat_lname
            End Get
        End Property
        
        Friend ReadOnly Property pat_phoneColumn As DataColumn
            Get
                Return Me.columnpat_phone
            End Get
        End Property
        
        Friend ReadOnly Property pat_ssnColumn As DataColumn
            Get
                Return Me.columnpat_ssn
            End Get
        End Property
        
        Friend ReadOnly Property pat_stateColumn As DataColumn
            Get
                Return Me.columnpat_state
            End Get
        End Property
        
        Friend ReadOnly Property pat_zipColumn As DataColumn
            Get
                Return Me.columnpat_zip
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As patientRow
            Get
                Return CType(Me.Rows(index),patientRow)
            End Get
        End Property
        
        Public Event patientRowChanged As patientRowChangeEventHandler
        
        Public Event patientRowChanging As patientRowChangeEventHandler
        
        Public Event patientRowDeleted As patientRowChangeEventHandler
        
        Public Event patientRowDeleting As patientRowChangeEventHandler
        
        Public Overloads Sub AddpatientRow(ByVal row As patientRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddpatientRow(ByVal pat_address As String, ByVal pat_city As String, ByVal pat_dob As String, ByVal pat_email As String, ByVal pat_fname As String, ByVal pat_lname As String, ByVal pat_phone As String, ByVal pat_ssn As Integer, ByVal pat_state As String, ByVal pat_zip As String) As patientRow
            Dim rowpatientRow As patientRow = CType(Me.NewRow,patientRow)
            rowpatientRow.ItemArray = New Object() {pat_address, pat_city, pat_dob, pat_email, pat_fname, pat_lname, pat_phone, pat_ssn, pat_state, pat_zip}
            Me.Rows.Add(rowpatientRow)
            Return rowpatientRow
        End Function
        
        Public Function FindBypat_ssn(ByVal pat_ssn As Integer) As patientRow
            Return CType(Me.Rows.Find(New Object() {pat_ssn}),patientRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As patientDataTable = CType(MyBase.Clone,patientDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New patientDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnpat_address = Me.Columns("pat_address")
            Me.columnpat_city = Me.Columns("pat_city")
            Me.columnpat_dob = Me.Columns("pat_dob")
            Me.columnpat_email = Me.Columns("pat_email")
            Me.columnpat_fname = Me.Columns("pat_fname")
            Me.columnpat_lname = Me.Columns("pat_lname")
            Me.columnpat_phone = Me.Columns("pat_phone")
            Me.columnpat_ssn = Me.Columns("pat_ssn")
            Me.columnpat_state = Me.Columns("pat_state")
            Me.columnpat_zip = Me.Columns("pat_zip")
        End Sub
        
        Private Sub InitClass()
            Me.columnpat_address = New DataColumn("pat_address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpat_address)
            Me.columnpat_city = New DataColumn("pat_city", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpat_city)
            Me.columnpat_dob = New DataColumn("pat_dob", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpat_dob)
            Me.columnpat_email = New DataColumn("pat_email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpat_email)
            Me.columnpat_fname = New DataColumn("pat_fname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpat_fname)
            Me.columnpat_lname = New DataColumn("pat_lname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpat_lname)
            Me.columnpat_phone = New DataColumn("pat_phone", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpat_phone)
            Me.columnpat_ssn = New DataColumn("pat_ssn", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpat_ssn)
            Me.columnpat_state = New DataColumn("pat_state", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpat_state)
            Me.columnpat_zip = New DataColumn("pat_zip", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpat_zip)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnpat_ssn}, true))
            Me.columnpat_ssn.AllowDBNull = false
            Me.columnpat_ssn.Unique = true
        End Sub
        
        Public Function NewpatientRow() As patientRow
            Return CType(Me.NewRow,patientRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New patientRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(patientRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.patientRowChangedEvent) Is Nothing) Then
                RaiseEvent patientRowChanged(Me, New patientRowChangeEvent(CType(e.Row,patientRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.patientRowChangingEvent) Is Nothing) Then
                RaiseEvent patientRowChanging(Me, New patientRowChangeEvent(CType(e.Row,patientRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.patientRowDeletedEvent) Is Nothing) Then
                RaiseEvent patientRowDeleted(Me, New patientRowChangeEvent(CType(e.Row,patientRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.patientRowDeletingEvent) Is Nothing) Then
                RaiseEvent patientRowDeleting(Me, New patientRowChangeEvent(CType(e.Row,patientRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovepatientRow(ByVal row As patientRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class patientRow
        Inherits DataRow
        
        Private tablepatient As patientDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepatient = CType(Me.Table,patientDataTable)
        End Sub
        
        Public Property pat_address As String
            Get
                Try 
                    Return CType(Me(Me.tablepatient.pat_addressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepatient.pat_addressColumn) = value
            End Set
        End Property
        
        Public Property pat_city As String
            Get
                Try 
                    Return CType(Me(Me.tablepatient.pat_cityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepatient.pat_cityColumn) = value
            End Set
        End Property
        
        Public Property pat_dob As String
            Get
                Try 
                    Return CType(Me(Me.tablepatient.pat_dobColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepatient.pat_dobColumn) = value
            End Set
        End Property
        
        Public Property pat_email As String
            Get
                Try 
                    Return CType(Me(Me.tablepatient.pat_emailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepatient.pat_emailColumn) = value
            End Set
        End Property
        
        Public Property pat_fname As String
            Get
                Try 
                    Return CType(Me(Me.tablepatient.pat_fnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepatient.pat_fnameColumn) = value
            End Set
        End Property
        
        Public Property pat_lname As String
            Get
                Try 
                    Return CType(Me(Me.tablepatient.pat_lnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepatient.pat_lnameColumn) = value
            End Set
        End Property
        
        Public Property pat_phone As String
            Get
                Try 
                    Return CType(Me(Me.tablepatient.pat_phoneColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepatient.pat_phoneColumn) = value
            End Set
        End Property
        
        Public Property pat_ssn As Integer
            Get
                Return CType(Me(Me.tablepatient.pat_ssnColumn),Integer)
            End Get
            Set
                Me(Me.tablepatient.pat_ssnColumn) = value
            End Set
        End Property
        
        Public Property pat_state As String
            Get
                Try 
                    Return CType(Me(Me.tablepatient.pat_stateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepatient.pat_stateColumn) = value
            End Set
        End Property
        
        Public Property pat_zip As String
            Get
                Try 
                    Return CType(Me(Me.tablepatient.pat_zipColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepatient.pat_zipColumn) = value
            End Set
        End Property
        
        Public Function Ispat_addressNull() As Boolean
            Return Me.IsNull(Me.tablepatient.pat_addressColumn)
        End Function
        
        Public Sub Setpat_addressNull()
            Me(Me.tablepatient.pat_addressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispat_cityNull() As Boolean
            Return Me.IsNull(Me.tablepatient.pat_cityColumn)
        End Function
        
        Public Sub Setpat_cityNull()
            Me(Me.tablepatient.pat_cityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispat_dobNull() As Boolean
            Return Me.IsNull(Me.tablepatient.pat_dobColumn)
        End Function
        
        Public Sub Setpat_dobNull()
            Me(Me.tablepatient.pat_dobColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispat_emailNull() As Boolean
            Return Me.IsNull(Me.tablepatient.pat_emailColumn)
        End Function
        
        Public Sub Setpat_emailNull()
            Me(Me.tablepatient.pat_emailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispat_fnameNull() As Boolean
            Return Me.IsNull(Me.tablepatient.pat_fnameColumn)
        End Function
        
        Public Sub Setpat_fnameNull()
            Me(Me.tablepatient.pat_fnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispat_lnameNull() As Boolean
            Return Me.IsNull(Me.tablepatient.pat_lnameColumn)
        End Function
        
        Public Sub Setpat_lnameNull()
            Me(Me.tablepatient.pat_lnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispat_phoneNull() As Boolean
            Return Me.IsNull(Me.tablepatient.pat_phoneColumn)
        End Function
        
        Public Sub Setpat_phoneNull()
            Me(Me.tablepatient.pat_phoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispat_stateNull() As Boolean
            Return Me.IsNull(Me.tablepatient.pat_stateColumn)
        End Function
        
        Public Sub Setpat_stateNull()
            Me(Me.tablepatient.pat_stateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function Ispat_zipNull() As Boolean
            Return Me.IsNull(Me.tablepatient.pat_zipColumn)
        End Function
        
        Public Sub Setpat_zipNull()
            Me(Me.tablepatient.pat_zipColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class patientRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As patientRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As patientRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As patientRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
