'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsAdvisingMain
    Inherits DataSet
    
    Private tableAppointment As AppointmentDataTable
    
    Private tableMessage As MessageDataTable
    
    Private tableStudent As StudentDataTable
    
    Private tableUser As UserDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Appointment")) Is Nothing) Then
                Me.Tables.Add(New AppointmentDataTable(ds.Tables("Appointment")))
            End If
            If (Not (ds.Tables("Message")) Is Nothing) Then
                Me.Tables.Add(New MessageDataTable(ds.Tables("Message")))
            End If
            If (Not (ds.Tables("Student")) Is Nothing) Then
                Me.Tables.Add(New StudentDataTable(ds.Tables("Student")))
            End If
            If (Not (ds.Tables("User")) Is Nothing) Then
                Me.Tables.Add(New UserDataTable(ds.Tables("User")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Appointment As AppointmentDataTable
        Get
            Return Me.tableAppointment
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Message As MessageDataTable
        Get
            Return Me.tableMessage
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Student As StudentDataTable
        Get
            Return Me.tableStudent
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property User As UserDataTable
        Get
            Return Me.tableUser
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsAdvisingMain = CType(MyBase.Clone,DsAdvisingMain)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Appointment")) Is Nothing) Then
            Me.Tables.Add(New AppointmentDataTable(ds.Tables("Appointment")))
        End If
        If (Not (ds.Tables("Message")) Is Nothing) Then
            Me.Tables.Add(New MessageDataTable(ds.Tables("Message")))
        End If
        If (Not (ds.Tables("Student")) Is Nothing) Then
            Me.Tables.Add(New StudentDataTable(ds.Tables("Student")))
        End If
        If (Not (ds.Tables("User")) Is Nothing) Then
            Me.Tables.Add(New UserDataTable(ds.Tables("User")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableAppointment = CType(Me.Tables("Appointment"),AppointmentDataTable)
        If (Not (Me.tableAppointment) Is Nothing) Then
            Me.tableAppointment.InitVars
        End If
        Me.tableMessage = CType(Me.Tables("Message"),MessageDataTable)
        If (Not (Me.tableMessage) Is Nothing) Then
            Me.tableMessage.InitVars
        End If
        Me.tableStudent = CType(Me.Tables("Student"),StudentDataTable)
        If (Not (Me.tableStudent) Is Nothing) Then
            Me.tableStudent.InitVars
        End If
        Me.tableUser = CType(Me.Tables("User"),UserDataTable)
        If (Not (Me.tableUser) Is Nothing) Then
            Me.tableUser.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsAdvisingMain"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsAdvisingMain.xsd"
        Me.Locale = New System.Globalization.CultureInfo("zh-CN")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableAppointment = New AppointmentDataTable
        Me.Tables.Add(Me.tableAppointment)
        Me.tableMessage = New MessageDataTable
        Me.Tables.Add(Me.tableMessage)
        Me.tableStudent = New StudentDataTable
        Me.Tables.Add(Me.tableStudent)
        Me.tableUser = New UserDataTable
        Me.Tables.Add(Me.tableUser)
    End Sub
    
    Private Function ShouldSerializeAppointment() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMessage() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeStudent() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeUser() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub AppointmentRowChangeEventHandler(ByVal sender As Object, ByVal e As AppointmentRowChangeEvent)
    
    Public Delegate Sub MessageRowChangeEventHandler(ByVal sender As Object, ByVal e As MessageRowChangeEvent)
    
    Public Delegate Sub StudentRowChangeEventHandler(ByVal sender As Object, ByVal e As StudentRowChangeEvent)
    
    Public Delegate Sub UserRowChangeEventHandler(ByVal sender As Object, ByVal e As UserRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AppointmentDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAComments As DataColumn
        
        Private columnAdvisor As DataColumn
        
        Private columnAppointment As DataColumn
        
        Private columnApptType As DataColumn
        
        Private columnSComments As DataColumn
        
        Private columnStudent As DataColumn
        
        Friend Sub New()
            MyBase.New("Appointment")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ACommentsColumn As DataColumn
            Get
                Return Me.columnAComments
            End Get
        End Property
        
        Friend ReadOnly Property AdvisorColumn As DataColumn
            Get
                Return Me.columnAdvisor
            End Get
        End Property
        
        Friend ReadOnly Property AppointmentColumn As DataColumn
            Get
                Return Me.columnAppointment
            End Get
        End Property
        
        Friend ReadOnly Property ApptTypeColumn As DataColumn
            Get
                Return Me.columnApptType
            End Get
        End Property
        
        Friend ReadOnly Property SCommentsColumn As DataColumn
            Get
                Return Me.columnSComments
            End Get
        End Property
        
        Friend ReadOnly Property StudentColumn As DataColumn
            Get
                Return Me.columnStudent
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AppointmentRow
            Get
                Return CType(Me.Rows(index),AppointmentRow)
            End Get
        End Property
        
        Public Event AppointmentRowChanged As AppointmentRowChangeEventHandler
        
        Public Event AppointmentRowChanging As AppointmentRowChangeEventHandler
        
        Public Event AppointmentRowDeleted As AppointmentRowChangeEventHandler
        
        Public Event AppointmentRowDeleting As AppointmentRowChangeEventHandler
        
        Public Overloads Sub AddAppointmentRow(ByVal row As AppointmentRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAppointmentRow(ByVal AComments As String, ByVal Advisor As String, ByVal Appointment As Date, ByVal ApptType As String, ByVal SComments As String, ByVal Student As String) As AppointmentRow
            Dim rowAppointmentRow As AppointmentRow = CType(Me.NewRow,AppointmentRow)
            rowAppointmentRow.ItemArray = New Object() {AComments, Advisor, Appointment, ApptType, SComments, Student}
            Me.Rows.Add(rowAppointmentRow)
            Return rowAppointmentRow
        End Function
        
        Public Function FindByAdvisorAppointmentStudent(ByVal Advisor As String, ByVal Appointment As Date, ByVal Student As String) As AppointmentRow
            Return CType(Me.Rows.Find(New Object() {Advisor, Appointment, Student}),AppointmentRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AppointmentDataTable = CType(MyBase.Clone,AppointmentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AppointmentDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAComments = Me.Columns("AComments")
            Me.columnAdvisor = Me.Columns("Advisor")
            Me.columnAppointment = Me.Columns("Appointment")
            Me.columnApptType = Me.Columns("ApptType")
            Me.columnSComments = Me.Columns("SComments")
            Me.columnStudent = Me.Columns("Student")
        End Sub
        
        Private Sub InitClass()
            Me.columnAComments = New DataColumn("AComments", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAComments)
            Me.columnAdvisor = New DataColumn("Advisor", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAdvisor)
            Me.columnAppointment = New DataColumn("Appointment", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAppointment)
            Me.columnApptType = New DataColumn("ApptType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApptType)
            Me.columnSComments = New DataColumn("SComments", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSComments)
            Me.columnStudent = New DataColumn("Student", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStudent)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnAdvisor, Me.columnAppointment, Me.columnStudent}, true))
            Me.columnAdvisor.AllowDBNull = false
            Me.columnAppointment.AllowDBNull = false
            Me.columnStudent.AllowDBNull = false
        End Sub
        
        Public Function NewAppointmentRow() As AppointmentRow
            Return CType(Me.NewRow,AppointmentRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AppointmentRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AppointmentRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AppointmentRowChangedEvent) Is Nothing) Then
                RaiseEvent AppointmentRowChanged(Me, New AppointmentRowChangeEvent(CType(e.Row,AppointmentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AppointmentRowChangingEvent) Is Nothing) Then
                RaiseEvent AppointmentRowChanging(Me, New AppointmentRowChangeEvent(CType(e.Row,AppointmentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AppointmentRowDeletedEvent) Is Nothing) Then
                RaiseEvent AppointmentRowDeleted(Me, New AppointmentRowChangeEvent(CType(e.Row,AppointmentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AppointmentRowDeletingEvent) Is Nothing) Then
                RaiseEvent AppointmentRowDeleting(Me, New AppointmentRowChangeEvent(CType(e.Row,AppointmentRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAppointmentRow(ByVal row As AppointmentRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AppointmentRow
        Inherits DataRow
        
        Private tableAppointment As AppointmentDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAppointment = CType(Me.Table,AppointmentDataTable)
        End Sub
        
        Public Property AComments As String
            Get
                Try 
                    Return CType(Me(Me.tableAppointment.ACommentsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppointment.ACommentsColumn) = value
            End Set
        End Property
        
        Public Property Advisor As String
            Get
                Return CType(Me(Me.tableAppointment.AdvisorColumn),String)
            End Get
            Set
                Me(Me.tableAppointment.AdvisorColumn) = value
            End Set
        End Property
        
        Public Property Appointment As Date
            Get
                Return CType(Me(Me.tableAppointment.AppointmentColumn),Date)
            End Get
            Set
                Me(Me.tableAppointment.AppointmentColumn) = value
            End Set
        End Property
        
        Public Property ApptType As String
            Get
                Try 
                    Return CType(Me(Me.tableAppointment.ApptTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppointment.ApptTypeColumn) = value
            End Set
        End Property
        
        Public Property SComments As String
            Get
                Try 
                    Return CType(Me(Me.tableAppointment.SCommentsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAppointment.SCommentsColumn) = value
            End Set
        End Property
        
        Public Property Student As String
            Get
                Return CType(Me(Me.tableAppointment.StudentColumn),String)
            End Get
            Set
                Me(Me.tableAppointment.StudentColumn) = value
            End Set
        End Property
        
        Public Function IsACommentsNull() As Boolean
            Return Me.IsNull(Me.tableAppointment.ACommentsColumn)
        End Function
        
        Public Sub SetACommentsNull()
            Me(Me.tableAppointment.ACommentsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApptTypeNull() As Boolean
            Return Me.IsNull(Me.tableAppointment.ApptTypeColumn)
        End Function
        
        Public Sub SetApptTypeNull()
            Me(Me.tableAppointment.ApptTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSCommentsNull() As Boolean
            Return Me.IsNull(Me.tableAppointment.SCommentsColumn)
        End Function
        
        Public Sub SetSCommentsNull()
            Me(Me.tableAppointment.SCommentsColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AppointmentRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AppointmentRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AppointmentRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AppointmentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MessageDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMessageID As DataColumn
        
        Private columnMsgText As DataColumn
        
        Private columnMsgType As DataColumn
        
        Friend Sub New()
            MyBase.New("Message")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MessageIDColumn As DataColumn
            Get
                Return Me.columnMessageID
            End Get
        End Property
        
        Friend ReadOnly Property MsgTextColumn As DataColumn
            Get
                Return Me.columnMsgText
            End Get
        End Property
        
        Friend ReadOnly Property MsgTypeColumn As DataColumn
            Get
                Return Me.columnMsgType
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MessageRow
            Get
                Return CType(Me.Rows(index),MessageRow)
            End Get
        End Property
        
        Public Event MessageRowChanged As MessageRowChangeEventHandler
        
        Public Event MessageRowChanging As MessageRowChangeEventHandler
        
        Public Event MessageRowDeleted As MessageRowChangeEventHandler
        
        Public Event MessageRowDeleting As MessageRowChangeEventHandler
        
        Public Overloads Sub AddMessageRow(ByVal row As MessageRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMessageRow(ByVal MessageID As String, ByVal MsgText As String, ByVal MsgType As String) As MessageRow
            Dim rowMessageRow As MessageRow = CType(Me.NewRow,MessageRow)
            rowMessageRow.ItemArray = New Object() {MessageID, MsgText, MsgType}
            Me.Rows.Add(rowMessageRow)
            Return rowMessageRow
        End Function
        
        Public Function FindByMessageID(ByVal MessageID As String) As MessageRow
            Return CType(Me.Rows.Find(New Object() {MessageID}),MessageRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MessageDataTable = CType(MyBase.Clone,MessageDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MessageDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMessageID = Me.Columns("MessageID")
            Me.columnMsgText = Me.Columns("MsgText")
            Me.columnMsgType = Me.Columns("MsgType")
        End Sub
        
        Private Sub InitClass()
            Me.columnMessageID = New DataColumn("MessageID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMessageID)
            Me.columnMsgText = New DataColumn("MsgText", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMsgText)
            Me.columnMsgType = New DataColumn("MsgType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMsgType)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnMessageID}, true))
            Me.columnMessageID.AllowDBNull = false
            Me.columnMessageID.Unique = true
        End Sub
        
        Public Function NewMessageRow() As MessageRow
            Return CType(Me.NewRow,MessageRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MessageRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MessageRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MessageRowChangedEvent) Is Nothing) Then
                RaiseEvent MessageRowChanged(Me, New MessageRowChangeEvent(CType(e.Row,MessageRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MessageRowChangingEvent) Is Nothing) Then
                RaiseEvent MessageRowChanging(Me, New MessageRowChangeEvent(CType(e.Row,MessageRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MessageRowDeletedEvent) Is Nothing) Then
                RaiseEvent MessageRowDeleted(Me, New MessageRowChangeEvent(CType(e.Row,MessageRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MessageRowDeletingEvent) Is Nothing) Then
                RaiseEvent MessageRowDeleting(Me, New MessageRowChangeEvent(CType(e.Row,MessageRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMessageRow(ByVal row As MessageRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MessageRow
        Inherits DataRow
        
        Private tableMessage As MessageDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMessage = CType(Me.Table,MessageDataTable)
        End Sub
        
        Public Property MessageID As String
            Get
                Return CType(Me(Me.tableMessage.MessageIDColumn),String)
            End Get
            Set
                Me(Me.tableMessage.MessageIDColumn) = value
            End Set
        End Property
        
        Public Property MsgText As String
            Get
                Try 
                    Return CType(Me(Me.tableMessage.MsgTextColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMessage.MsgTextColumn) = value
            End Set
        End Property
        
        Public Property MsgType As String
            Get
                Try 
                    Return CType(Me(Me.tableMessage.MsgTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMessage.MsgTypeColumn) = value
            End Set
        End Property
        
        Public Function IsMsgTextNull() As Boolean
            Return Me.IsNull(Me.tableMessage.MsgTextColumn)
        End Function
        
        Public Sub SetMsgTextNull()
            Me(Me.tableMessage.MsgTextColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMsgTypeNull() As Boolean
            Return Me.IsNull(Me.tableMessage.MsgTypeColumn)
        End Function
        
        Public Sub SetMsgTypeNull()
            Me(Me.tableMessage.MsgTypeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MessageRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MessageRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MessageRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MessageRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StudentDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAddress As DataColumn
        
        Private columnAdmitted As DataColumn
        
        Private columnCity As DataColumn
        
        Private columnCollegeDept As DataColumn
        
        Private columnCountry As DataColumn
        
        Private columnEmail As DataColumn
        
        Private columnLNum As DataColumn
        
        Private columnMailingCode As DataColumn
        
        Private columnMajor As DataColumn
        
        Private columnPhoneNum As DataColumn
        
        Private columnSSN As DataColumn
        
        Private columnStateProvince As DataColumn
        
        Private columnUsername As DataColumn
        
        Friend Sub New()
            MyBase.New("Student")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property AddressColumn As DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        Friend ReadOnly Property AdmittedColumn As DataColumn
            Get
                Return Me.columnAdmitted
            End Get
        End Property
        
        Friend ReadOnly Property CityColumn As DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        Friend ReadOnly Property CollegeDeptColumn As DataColumn
            Get
                Return Me.columnCollegeDept
            End Get
        End Property
        
        Friend ReadOnly Property CountryColumn As DataColumn
            Get
                Return Me.columnCountry
            End Get
        End Property
        
        Friend ReadOnly Property EmailColumn As DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        Friend ReadOnly Property LNumColumn As DataColumn
            Get
                Return Me.columnLNum
            End Get
        End Property
        
        Friend ReadOnly Property MailingCodeColumn As DataColumn
            Get
                Return Me.columnMailingCode
            End Get
        End Property
        
        Friend ReadOnly Property MajorColumn As DataColumn
            Get
                Return Me.columnMajor
            End Get
        End Property
        
        Friend ReadOnly Property PhoneNumColumn As DataColumn
            Get
                Return Me.columnPhoneNum
            End Get
        End Property
        
        Friend ReadOnly Property SSNColumn As DataColumn
            Get
                Return Me.columnSSN
            End Get
        End Property
        
        Friend ReadOnly Property StateProvinceColumn As DataColumn
            Get
                Return Me.columnStateProvince
            End Get
        End Property
        
        Friend ReadOnly Property UsernameColumn As DataColumn
            Get
                Return Me.columnUsername
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As StudentRow
            Get
                Return CType(Me.Rows(index),StudentRow)
            End Get
        End Property
        
        Public Event StudentRowChanged As StudentRowChangeEventHandler
        
        Public Event StudentRowChanging As StudentRowChangeEventHandler
        
        Public Event StudentRowDeleted As StudentRowChangeEventHandler
        
        Public Event StudentRowDeleting As StudentRowChangeEventHandler
        
        Public Overloads Sub AddStudentRow(ByVal row As StudentRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddStudentRow(ByVal Address As String, ByVal Admitted As Boolean, ByVal City As String, ByVal CollegeDept As String, ByVal Country As String, ByVal Email As String, ByVal LNum As String, ByVal MailingCode As String, ByVal Major As String, ByVal PhoneNum As String, ByVal SSN As String, ByVal StateProvince As String, ByVal Username As String) As StudentRow
            Dim rowStudentRow As StudentRow = CType(Me.NewRow,StudentRow)
            rowStudentRow.ItemArray = New Object() {Address, Admitted, City, CollegeDept, Country, Email, LNum, MailingCode, Major, PhoneNum, SSN, StateProvince, Username}
            Me.Rows.Add(rowStudentRow)
            Return rowStudentRow
        End Function
        
        Public Function FindByUsername(ByVal Username As String) As StudentRow
            Return CType(Me.Rows.Find(New Object() {Username}),StudentRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As StudentDataTable = CType(MyBase.Clone,StudentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New StudentDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAddress = Me.Columns("Address")
            Me.columnAdmitted = Me.Columns("Admitted")
            Me.columnCity = Me.Columns("City")
            Me.columnCollegeDept = Me.Columns("CollegeDept")
            Me.columnCountry = Me.Columns("Country")
            Me.columnEmail = Me.Columns("Email")
            Me.columnLNum = Me.Columns("LNum")
            Me.columnMailingCode = Me.Columns("MailingCode")
            Me.columnMajor = Me.Columns("Major")
            Me.columnPhoneNum = Me.Columns("PhoneNum")
            Me.columnSSN = Me.Columns("SSN")
            Me.columnStateProvince = Me.Columns("StateProvince")
            Me.columnUsername = Me.Columns("Username")
        End Sub
        
        Private Sub InitClass()
            Me.columnAddress = New DataColumn("Address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddress)
            Me.columnAdmitted = New DataColumn("Admitted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAdmitted)
            Me.columnCity = New DataColumn("City", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCity)
            Me.columnCollegeDept = New DataColumn("CollegeDept", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCollegeDept)
            Me.columnCountry = New DataColumn("Country", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCountry)
            Me.columnEmail = New DataColumn("Email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmail)
            Me.columnLNum = New DataColumn("LNum", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLNum)
            Me.columnMailingCode = New DataColumn("MailingCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMailingCode)
            Me.columnMajor = New DataColumn("Major", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMajor)
            Me.columnPhoneNum = New DataColumn("PhoneNum", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPhoneNum)
            Me.columnSSN = New DataColumn("SSN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSSN)
            Me.columnStateProvince = New DataColumn("StateProvince", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStateProvince)
            Me.columnUsername = New DataColumn("Username", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUsername)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnUsername}, true))
            Me.columnUsername.AllowDBNull = false
            Me.columnUsername.Unique = true
        End Sub
        
        Public Function NewStudentRow() As StudentRow
            Return CType(Me.NewRow,StudentRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New StudentRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(StudentRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StudentRowChangedEvent) Is Nothing) Then
                RaiseEvent StudentRowChanged(Me, New StudentRowChangeEvent(CType(e.Row,StudentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StudentRowChangingEvent) Is Nothing) Then
                RaiseEvent StudentRowChanging(Me, New StudentRowChangeEvent(CType(e.Row,StudentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StudentRowDeletedEvent) Is Nothing) Then
                RaiseEvent StudentRowDeleted(Me, New StudentRowChangeEvent(CType(e.Row,StudentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StudentRowDeletingEvent) Is Nothing) Then
                RaiseEvent StudentRowDeleting(Me, New StudentRowChangeEvent(CType(e.Row,StudentRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveStudentRow(ByVal row As StudentRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StudentRow
        Inherits DataRow
        
        Private tableStudent As StudentDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableStudent = CType(Me.Table,StudentDataTable)
        End Sub
        
        Public Property Address As String
            Get
                Try 
                    Return CType(Me(Me.tableStudent.AddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudent.AddressColumn) = value
            End Set
        End Property
        
        Public Property Admitted As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableStudent.AdmittedColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudent.AdmittedColumn) = value
            End Set
        End Property
        
        Public Property City As String
            Get
                Try 
                    Return CType(Me(Me.tableStudent.CityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudent.CityColumn) = value
            End Set
        End Property
        
        Public Property CollegeDept As String
            Get
                Try 
                    Return CType(Me(Me.tableStudent.CollegeDeptColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudent.CollegeDeptColumn) = value
            End Set
        End Property
        
        Public Property Country As String
            Get
                Try 
                    Return CType(Me(Me.tableStudent.CountryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudent.CountryColumn) = value
            End Set
        End Property
        
        Public Property Email As String
            Get
                Try 
                    Return CType(Me(Me.tableStudent.EmailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudent.EmailColumn) = value
            End Set
        End Property
        
        Public Property LNum As String
            Get
                Try 
                    Return CType(Me(Me.tableStudent.LNumColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudent.LNumColumn) = value
            End Set
        End Property
        
        Public Property MailingCode As String
            Get
                Try 
                    Return CType(Me(Me.tableStudent.MailingCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudent.MailingCodeColumn) = value
            End Set
        End Property
        
        Public Property Major As String
            Get
                Try 
                    Return CType(Me(Me.tableStudent.MajorColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudent.MajorColumn) = value
            End Set
        End Property
        
        Public Property PhoneNum As String
            Get
                Try 
                    Return CType(Me(Me.tableStudent.PhoneNumColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudent.PhoneNumColumn) = value
            End Set
        End Property
        
        Public Property SSN As String
            Get
                Try 
                    Return CType(Me(Me.tableStudent.SSNColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudent.SSNColumn) = value
            End Set
        End Property
        
        Public Property StateProvince As String
            Get
                Try 
                    Return CType(Me(Me.tableStudent.StateProvinceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableStudent.StateProvinceColumn) = value
            End Set
        End Property
        
        Public Property Username As String
            Get
                Return CType(Me(Me.tableStudent.UsernameColumn),String)
            End Get
            Set
                Me(Me.tableStudent.UsernameColumn) = value
            End Set
        End Property
        
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableStudent.AddressColumn)
        End Function
        
        Public Sub SetAddressNull()
            Me(Me.tableStudent.AddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAdmittedNull() As Boolean
            Return Me.IsNull(Me.tableStudent.AdmittedColumn)
        End Function
        
        Public Sub SetAdmittedNull()
            Me(Me.tableStudent.AdmittedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tableStudent.CityColumn)
        End Function
        
        Public Sub SetCityNull()
            Me(Me.tableStudent.CityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCollegeDeptNull() As Boolean
            Return Me.IsNull(Me.tableStudent.CollegeDeptColumn)
        End Function
        
        Public Sub SetCollegeDeptNull()
            Me(Me.tableStudent.CollegeDeptColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCountryNull() As Boolean
            Return Me.IsNull(Me.tableStudent.CountryColumn)
        End Function
        
        Public Sub SetCountryNull()
            Me(Me.tableStudent.CountryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tableStudent.EmailColumn)
        End Function
        
        Public Sub SetEmailNull()
            Me(Me.tableStudent.EmailColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLNumNull() As Boolean
            Return Me.IsNull(Me.tableStudent.LNumColumn)
        End Function
        
        Public Sub SetLNumNull()
            Me(Me.tableStudent.LNumColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMailingCodeNull() As Boolean
            Return Me.IsNull(Me.tableStudent.MailingCodeColumn)
        End Function
        
        Public Sub SetMailingCodeNull()
            Me(Me.tableStudent.MailingCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMajorNull() As Boolean
            Return Me.IsNull(Me.tableStudent.MajorColumn)
        End Function
        
        Public Sub SetMajorNull()
            Me(Me.tableStudent.MajorColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPhoneNumNull() As Boolean
            Return Me.IsNull(Me.tableStudent.PhoneNumColumn)
        End Function
        
        Public Sub SetPhoneNumNull()
            Me(Me.tableStudent.PhoneNumColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSSNNull() As Boolean
            Return Me.IsNull(Me.tableStudent.SSNColumn)
        End Function
        
        Public Sub SetSSNNull()
            Me(Me.tableStudent.SSNColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStateProvinceNull() As Boolean
            Return Me.IsNull(Me.tableStudent.StateProvinceColumn)
        End Function
        
        Public Sub SetStateProvinceNull()
            Me(Me.tableStudent.StateProvinceColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class StudentRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As StudentRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As StudentRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As StudentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFName As DataColumn
        
        Private columnLName As DataColumn
        
        Private columnMidInit As DataColumn
        
        Private columnPassword As DataColumn
        
        Private columnPermission As DataColumn
        
        Private columnUsername As DataColumn
        
        Friend Sub New()
            MyBase.New("User")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property FNameColumn As DataColumn
            Get
                Return Me.columnFName
            End Get
        End Property
        
        Friend ReadOnly Property LNameColumn As DataColumn
            Get
                Return Me.columnLName
            End Get
        End Property
        
        Friend ReadOnly Property MidInitColumn As DataColumn
            Get
                Return Me.columnMidInit
            End Get
        End Property
        
        Friend ReadOnly Property PasswordColumn As DataColumn
            Get
                Return Me.columnPassword
            End Get
        End Property
        
        Friend ReadOnly Property PermissionColumn As DataColumn
            Get
                Return Me.columnPermission
            End Get
        End Property
        
        Friend ReadOnly Property UsernameColumn As DataColumn
            Get
                Return Me.columnUsername
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As UserRow
            Get
                Return CType(Me.Rows(index),UserRow)
            End Get
        End Property
        
        Public Event UserRowChanged As UserRowChangeEventHandler
        
        Public Event UserRowChanging As UserRowChangeEventHandler
        
        Public Event UserRowDeleted As UserRowChangeEventHandler
        
        Public Event UserRowDeleting As UserRowChangeEventHandler
        
        Public Overloads Sub AddUserRow(ByVal row As UserRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddUserRow(ByVal FName As String, ByVal LName As String, ByVal MidInit As String, ByVal Password As String, ByVal Permission As String, ByVal Username As String) As UserRow
            Dim rowUserRow As UserRow = CType(Me.NewRow,UserRow)
            rowUserRow.ItemArray = New Object() {FName, LName, MidInit, Password, Permission, Username}
            Me.Rows.Add(rowUserRow)
            Return rowUserRow
        End Function
        
        Public Function FindByUsername(ByVal Username As String) As UserRow
            Return CType(Me.Rows.Find(New Object() {Username}),UserRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As UserDataTable = CType(MyBase.Clone,UserDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New UserDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnFName = Me.Columns("FName")
            Me.columnLName = Me.Columns("LName")
            Me.columnMidInit = Me.Columns("MidInit")
            Me.columnPassword = Me.Columns("Password")
            Me.columnPermission = Me.Columns("Permission")
            Me.columnUsername = Me.Columns("Username")
        End Sub
        
        Private Sub InitClass()
            Me.columnFName = New DataColumn("FName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFName)
            Me.columnLName = New DataColumn("LName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLName)
            Me.columnMidInit = New DataColumn("MidInit", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMidInit)
            Me.columnPassword = New DataColumn("Password", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPassword)
            Me.columnPermission = New DataColumn("Permission", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPermission)
            Me.columnUsername = New DataColumn("Username", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUsername)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnUsername}, true))
            Me.columnUsername.AllowDBNull = false
            Me.columnUsername.Unique = true
        End Sub
        
        Public Function NewUserRow() As UserRow
            Return CType(Me.NewRow,UserRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New UserRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(UserRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UserRowChangedEvent) Is Nothing) Then
                RaiseEvent UserRowChanged(Me, New UserRowChangeEvent(CType(e.Row,UserRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UserRowChangingEvent) Is Nothing) Then
                RaiseEvent UserRowChanging(Me, New UserRowChangeEvent(CType(e.Row,UserRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UserRowDeletedEvent) Is Nothing) Then
                RaiseEvent UserRowDeleted(Me, New UserRowChangeEvent(CType(e.Row,UserRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UserRowDeletingEvent) Is Nothing) Then
                RaiseEvent UserRowDeleting(Me, New UserRowChangeEvent(CType(e.Row,UserRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveUserRow(ByVal row As UserRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserRow
        Inherits DataRow
        
        Private tableUser As UserDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableUser = CType(Me.Table,UserDataTable)
        End Sub
        
        Public Property FName As String
            Get
                Try 
                    Return CType(Me(Me.tableUser.FNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUser.FNameColumn) = value
            End Set
        End Property
        
        Public Property LName As String
            Get
                Try 
                    Return CType(Me(Me.tableUser.LNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUser.LNameColumn) = value
            End Set
        End Property
        
        Public Property MidInit As String
            Get
                Try 
                    Return CType(Me(Me.tableUser.MidInitColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUser.MidInitColumn) = value
            End Set
        End Property
        
        Public Property Password As String
            Get
                Try 
                    Return CType(Me(Me.tableUser.PasswordColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUser.PasswordColumn) = value
            End Set
        End Property
        
        Public Property Permission As String
            Get
                Try 
                    Return CType(Me(Me.tableUser.PermissionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUser.PermissionColumn) = value
            End Set
        End Property
        
        Public Property Username As String
            Get
                Return CType(Me(Me.tableUser.UsernameColumn),String)
            End Get
            Set
                Me(Me.tableUser.UsernameColumn) = value
            End Set
        End Property
        
        Public Function IsFNameNull() As Boolean
            Return Me.IsNull(Me.tableUser.FNameColumn)
        End Function
        
        Public Sub SetFNameNull()
            Me(Me.tableUser.FNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLNameNull() As Boolean
            Return Me.IsNull(Me.tableUser.LNameColumn)
        End Function
        
        Public Sub SetLNameNull()
            Me(Me.tableUser.LNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMidInitNull() As Boolean
            Return Me.IsNull(Me.tableUser.MidInitColumn)
        End Function
        
        Public Sub SetMidInitNull()
            Me(Me.tableUser.MidInitColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPasswordNull() As Boolean
            Return Me.IsNull(Me.tableUser.PasswordColumn)
        End Function
        
        Public Sub SetPasswordNull()
            Me(Me.tableUser.PasswordColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPermissionNull() As Boolean
            Return Me.IsNull(Me.tableUser.PermissionColumn)
        End Function
        
        Public Sub SetPermissionNull()
            Me(Me.tableUser.PermissionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As UserRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As UserRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As UserRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
