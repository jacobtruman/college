CSC 218, Section 01, 02
Homework,  Asst. #10

Purpose:  Become more familiar with data representation, program control
          instructions, procedure handling, stacks, and operating system
          interaction.
Due:      Wednesday    (10/19)
Points:   120   (100 for program, 20 for documentation)


Assignment:
Write a simple assembly language program to draw circles.  The program
should draw a border and then display circles in different colors.
The number of circles to draw must be read from command line.
For example:

     c:\> mcircles /p=100

The required format for the count of circles option is:
  /c=<number> (no spaces, as shown above).  The program must be able to
handle one or more blanks before the initial "/".  The program must
verify the format, read the number, and ensure the number is valid.
The program must and ensure that the number is between 3 and 10000.
If there are any input errors, the program should display an
appropriate error message and terminate.

The program will generate a random number for the circle center
position (x,y) and radius.  The program will draw each circle in a
different color.

The provided main program calls routines to:

  * Handle the command line argument - Read command line option
    (/c=<number>).  Must handle one or more blanks before the initial "/".
    The program must verify the format, read the number, and ensure the
    number is valid.  The program must and ensure that the number is
    between 3 and 10000.  If there are any input errors, the procedure
    should display an appropriate error message and terminate from inside
    the procedure

  * Draw the border - Plot a border around the screen, three pixels wide.
    Use provided algorithm.

  * Draw the circle - Draw a circle by plotting points.  The circle center
    position (x,y), radius, and color are passed to the procedure.
   
  * Generate a random number - Return a random number between 1 and MAX-1.
    Use provided algorithm.

All procedures must follow the standard calling convention as discussed in
class.  The procedures for the command line arguments and file operations
must be in a separate assembly source file from the main program.
Submit only the secondary source file.


Submission:
When complete, submit a copy of the source file via the class web page
(assignment submission link) on Wednesday, October 19, 2005 before 4:00pm.
Assignments received after 4:00pm will not  be accepted!  Do not submit a
hard-copy.


Circle Drawing Algorithm
------------------------
To generate the point to draw a circle, implement the following algorithm:

     x = radius
     a = -2x + 1
     y = 0
     f = 0
     b = 1
     repeat {
         plot_pixel (x_center + x, y_center + y, color)
         plot_pixel (x_center + x, y_center - y, color)
         plot_pixel (x_center - x, y_center + y, color)
         plot_pixel (x_center - x, y_center - y, color)
         if ( f <= r ) then
          y = y + 1
          f = f + b
          b = b + 3
         else
          x = x - 1
          f = f + a
          a = a + 2
         endif
     } until ( x <= 0 )


Random Number Generation
------------------------
To generate a pseudo random number, use the linear congruential generator
method.  It is fast, simple, and (if instantiated with the right constants)
gives reasonable pseudo-random numbers.  The next random number is
generated from the previous one by:

     Rn+1 = (A   Rn + B) mod 216

The initial random number Rn (on which the rest are based on is referred
to as the "seed").  The value for A must be a prime number.  For our
purposes, set A=9421 and B=1.  The seed should be obtained by using the
seconds from the current system time.  Note, to provide a random number
between 0 and MAX-1, the use the "mod MAX" function (for remainder after
division).


SVGA Graphics
-------------
VGA stands for Super Video Graphics Array.  SVGA is a video mode, which is
an interface between a computer and its corresponding monitor.  In SVGA
mode the screen is 640 pixels in width and 480 pixels in height.  This is
mapped 0 to 639 on the x axis and 0 to 479 on the y axis, with the origin
(0,0) at the top-left corner.  The pixel color is set via a pre-defined
integer.  For example, Blue=1, Green=2, Red=4, Yellow=14, and White=15.
To plot points, use the "int 10h" service 0ch.

For example, to plot a point at about the center of the screen:

	mov	ah, 0ch		; plot point
	mov	al, 2		; green
	mov	cx, 320		; x position
	mov	dx, 240		; y position
	int	10h


